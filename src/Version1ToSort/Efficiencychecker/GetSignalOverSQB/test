\1;95;0c#include "base_functions.h"
#include "Macros.h"
#include "mylib.h"
#include "canvas_margin.h"

void GetSignalOverB_combinedSR(int i=0,TString channel="EE"){ 

  TString ptbin="";  TString _chan = "Schannel";
  TString analysername="HNDilepton" ;
  // check which pc is running script to setup local paths
  TString s_hostname = GetHostname();

  
  vector<TString> code_names= {"HNDilepton"};
  vector<TString> channel_names= {"Schannel"};
  vector<TString> range_names = {"all"};

  if(std::find(code_names.begin(), code_names.end(), analysername) != code_names.end()) cout << "Running with code " << analysername << endl;
  else {cout << "Error in input of analyzer: " << analysername << endl; for (auto i: code_names)   std::cout << i << ' '; return; }

  
  // local path names
  TString ENV_FILE_PATH= (getenv("INFILE_PATH"));
  TString ENV_MERGEDFILE_PATH = getenv("INFILE_MERGED_PATH");
  TString ENV_PLOT_PATH = getenv("PLOT_PATH");
  TString FLATVERSION = getenv("FLATVERSION");

  
  MakeDir(ENV_PLOT_PATH + FLATVERSION);
  TString input_path = ENV_FILE_PATH + FLATVERSION+"/"+analysername+"/";
  TString output = ENV_PLOT_PATH + FLATVERSION + "/"+analysername+"/";

  MakeDir(output);

  output+="/SignalOverBackground/";
  MakeDir(output);

  output+="/Combined/";
  MakeDir(output);
  
  output+="SignalRegions/";
  MakeDir(output);




  cout << "GetSignalEfficiency_combinedSR::LOG Output dir = " << output << endl;
  
  if(s_hostname == "JohnMB2018s-MacBook-Pro.local"){
    input_path = "/Users/john/HNDiLeptonWorskspace/OutputTool/MergedFiles/";
  }

  // Set Plotting style
  setTDRStyle();
  gStyle->SetPalette(1);
    

  
  vector<TString> SR;
  SR.push_back("SR1");
  SR.push_back("SR2");
  
  vector<TString> PTBins;
  PTBins.push_back("_HighPt");
  PTBins.push_back("_LowPt");

  //SR.push_back(make_pair("OS", make_pair("SR3","SR4")));
  

  TString   tag= "";  

  vector<TString> muIDs={};
  
  vector<TString> elIDs={};

 if (i==11){

    tag= "MVA";

    vector<TString> elIDsPOG = {"HNTight_dxy05_05_dz01_ip4_5","HNTight2016","HNTight2016Update"};
    for(unsigned int l=0; l < 11; l++){
      for(unsigned int j=0; j < 11; j++){
        for(unsigned int k=0; k < 6; k++){
          double mva_1 = 0.8 + 0.01*double(l);    std::string mva1= std::to_string(mva_1);
          double mva_2 = 0.7 + 0.02*double(j);    std::string mva2= std::to_string(mva_2);
          double mva_3 = 0.5 + 0.05*double(k);    std::string mva3= std::to_string(mva_3);
	  
          elIDsPOG.push_back("passMVAID_V1_mva1_"+TString(mva1)+"_mva2_"+TString(mva2)+"_mva3_"+TString(mva3));
        }
      }
    }
    elIDs=elIDsPOG;
 }
 
 

  
  vector<TString> IDs;
  
  if(channel == "EE")  IDs = elIDs;
  if(channel == "MuMu")  IDs = muIDs;

  IDs = {};
  
  vector<TString> ignore_masses = {"100"};
  
      
  //vector <TString> masses = GetMassType1Strings(ignore_masses,"Schannel");
  //vector <double> d_masses = GetMassType1Doubles(ignore_masses,"Schannel");

  vector <TString> masses = {"100"};
  vector <double> d_masses = {100.};
  
  
  TString _channel = channel;
  
  // hist leg
  TLegend *legend = MakeLegend(0.65, 0.65, 0.9, 0.92);
  // graph leg
  
  TLegend *legend_g = MakeLegend(0.65, 0.65, 0.9, 0.92);


  TString promptpath1 = ENV_MERGEDFILE_PATH+ analysername+"/2016/"+analysername+"_SkimTree_SSHN_Muon.root";
  if(channel=="EE") promptpath1 = ENV_MERGEDFILE_PATH+ analysername+"/2016/"+analysername+"_SkimTree_SSHN_DoubleEG.root";

  TFile * _file1 = new TFile(promptpath1);
  TDirectory* _dir1 = _file1->GetDirectory("presel_EE_same_sign");
  TList* list1 = _dir1->GetListOfKeys() ;
  TIter next(list1) ;
  TKey* key1 ;
  TObject* obj1 ;
  
  
  while ( (key1 = (TKey*)next()) ) {
    obj1 = key1->ReadObj() ;
    TString hname = obj1->GetName();
    TString objname= obj1->ClassName();
    if(!hname.Contains("LowPt")) continue;
    if(i==0){
      if(!hname.Contains("ipB")) continue;
    }
    

    hname = hname.ReplaceAll("_HighPt","");
    hname = hname.ReplaceAll("_LowPt","");
    hname = hname.ReplaceAll("presel_EE_same_sign_SR2_njets_HNDilepton_EE_","");
    hname = hname.ReplaceAll("presel_EE_same_sign_SR1_njets_HNDilepton_EE_","");
    hname = hname.ReplaceAll("presel_EE_same_sign/","");
	
    IDs.push_back(hname);
  }


  cout << "Number of IDs  = " << IDs.size() << endl;
  
  map<TString, double> map_punzi;

    
    vector<double> binvalues;
    //    vector<double> av_total_mass_value;
    //    vector<double> nbins;
    for(unsigned int l = 0 ; l < IDs.size(); l++){
      for(unsigned int i = 0 ; i < masses.size(); ++i){
	binvalues.push_back(0.);
      }
    }
    

    TString histlabel= "_"+_channel +  +"_highmass_"+analysername;
    TH2D* hist2 = new TH2D(histlabel,histlabel,masses.size()+1,0,masses.size()+1., IDs.size(),0., IDs.size());

    vector<TString> years={"2016","2017","2018"};
    
    for(unsigned int y =0; y < years.size(); ++y){

      map<double, TString> map_punzi;
      
      TString year = years[y];
      for(unsigned int j = 0 ; j < SR.size(); ++j){
      TString _sr = SR[j];
      
      for(unsigned int p = 0 ; p < PTBins.size(); p++){
	ptbin = PTBins[p];
	
	if(ptbin == "_LowPt" && _sr == "SR2") continue;

	if(d_masses[i] <= 200. &&  _sr == "SR2") continue;
	if(d_masses[i] >= 1000. &&  _sr == "SR1") continue;
	if(d_masses[i] >= 300. &&  ptbin == "_LowPt") continue;
	
	//cout <<  "START : " << ptbin << " " << _sr << endl; 
	vector<double> IDvalues;	

	TString promptpath = ENV_MERGEDFILE_PATH+ analysername+"/"+year+"/"+analysername+"_SkimTree_SSHN_Muon.root";
	if(channel=="EE") promptpath = ENV_MERGEDFILE_PATH+ analysername+"/"+year+"/"+analysername+"_SkimTree_SSHN_DoubleEG.root";
	if(channel=="EE"&&year=="2018") promptpath = ENV_MERGEDFILE_PATH+ analysername+"/"+year+"/"+analysername+"_SkimTree_SSHN_EGamma.root";
	
	TFile * file_prompt = new TFile((promptpath).Data());
	
	for(unsigned int l = 0 ; l < IDs.size(); l++){

	  TString _id = IDs[l];
	  hist2->GetYaxis()->SetBinLabel(l+1, _id);
	  
	  TString n_sr_hist ="preselMuMu_same_sign/preselMuMu_same_sign_"+_sr+"_njets_HNDilepton_"+channel+"_"+_id+ptbin;
	  if(channel=="EE")n_sr_hist ="presel_EE_same_sign/presel_EE_same_sign_"+_sr+"_njets_HNDilepton_"+channel+"_"+_id+ptbin;
	  
	  TH1D* hpass = (TH1D*)(file_prompt->Get(n_sr_hist));

	  double total_p = hpass->Integral();
	  
	  double total_b = sqrt(total_p);
	  cout << l << " / " << IDs.size() << " "  << _id << " "  << total_b << endl;
	  IDvalues.push_back(total_b);
	}

	//cout << "New loop"<< endl;
	int counter(0);
	for(unsigned int i = 0 ; i < masses.size(); ++i){
	  
	  double ibin(0);
	  vector<double> mass_values;
	  double total_mass_value(0.);

	  
	  TString im = masses.at(i);
	  
	  hist2->GetXaxis()->SetBinLabel(i+1, im);

	  //HNDilepton_DYTypeI_SS_EE_M100.root
	  TString sigpathS = ENV_MERGEDFILE_PATH+ "/"+analysername+"/2016/SIG/"+analysername+"_DYTypeI_SS_"+_channel+"_M"+im+".root";
	  TFile * filemm = new TFile((sigpathS).Data());
	  
	  if(CheckFile(filemm) > 0) {
	    mass_values.push_back(0.);
	    continue;
	    
	    filemm->Close();
	    delete filemm;
	    
	  }
	  
	  
	  for(unsigned int l = 0 ; l < IDs.size(); l++){
	    
	    TString _id = IDs[l];
	    
	    TString n_sr_hist ="preselMuMu_same_sign/preselMuMu_same_sign_"+_sr+"_njets_HNDilepton_"+channel+"_"+_id+ptbin;
	    if(channel=="EE")n_sr_hist ="presel_EE_same_sign/presel_EE_same_sign_"+_sr+"_njets_HNDilepton_"+channel+"_"+_id+ptbin;

	    float nsig= 1.;
	    TH1D* hpass1 = (TH1D*)(filemm->Get(n_sr_hist));
	    double err ;
	    hpass1->IntegralAndError(1, hpass1->GetNbinsX()+1, err    , "");
	    double  punzi = (IDvalues[l] > 0) ?  ((hpass1->Integral()) /(nsig)) /IDvalues[l] : 0.;
	    cout << _id << " " << hpass1->Integral() << " " << IDvalues[l] <<  " " << punzi<< endl;
	    ibin++;
	    mass_values.push_back(punzi);
	    total_mass_value+=punzi;

	    map_punzi[punzi] = _id;

	  }
	  filemm->Close();
	  delete filemm;
	  
	  for(unsigned int l = 0 ; l < IDs.size(); l++){
	    
	    binvalues[counter] = binvalues[counter] + mass_values[l];
	    counter++;
	  }
	  
	} // mass loop
	hist2->GetXaxis()->SetBinLabel(masses.size()+1, "Sum");
	
      } // ptbin loop
      
      
      }// SR loop
    
      
      //cout << "Get Average " << endl;
      int counter(0);
      
      for(unsigned int i = 0 ; i < masses.size(); ++i){
	double average(0.);// = av_total_mass_value[i]/nbins[i];
	double count=0.;
	
	int counter_tmp=counter;
	for(unsigned int l = 0 ; l < IDs.size(); l++){
	  average+=binvalues[counter_tmp];
	  if(binvalues[counter_tmp] > 0.) count=count+1.;
	  counter_tmp++;
	}
	
	average=average/count;
	for(unsigned int l = 0 ; l < IDs.size(); l++){
	  //cout << masses[i] << " " << IDs[l] << " "  << binvalues[counter] << " " << average << endl;
	  hist2->SetBinContent(i+1, l+1, binvalues[counter]/average);
	  counter++;
	}
      }
      
      counter=0;
      double max_punzi = -999.;
      int _max_id=-1;
      for(unsigned int l = 0 ; l < IDs.size(); l++){
	
	double total_id(0);
	for(unsigned int i = 0 ; i < masses.size(); ++i){
	  total_id+= hist2->GetBinContent(i+1, l+1);
	  counter++;
	}
	hist2->SetBinContent(masses.size()+1, l+1, total_id/masses.size());
	if(total_id/masses.size() > max_punzi) {
	  max_punzi = total_id/masses.size();
	  _max_id = l;
	}
      }
      
      cout << year  << " MAX ID = " << IDs[_max_id] << "  " << max_punzi  << endl;

      for (auto i: map_punzi) cout << year  << " " << i.first << " " << i.second << endl;
      
      TString canvasname2="SR12_highmass_njets_"+analysername+"_JA_"+_channel+ptbin+channel+year;
      TCanvas* c2 = new TCanvas(canvasname2,canvasname2, 800,800);
      c2->cd();
      
      TString outfile = output  +  "/TH2D_"+ptbin+"SR12highmass_signaloverbackground_"+analysername+"_"+_chan+"_"+channel+tag+year+".root";
      TFile* fout = new TFile(outfile.Data(),"RECREATE");
      
      hist2->Draw("colztext");
      hist2->Write();
      
      TString save_sg= output + "/TH2D_"+ptbin+"SR12highmass_signaloverbackground_"+analysername+"_"+_chan+"_"+channel+tag+year+".pdf";
      
      c2->SaveAs(save_sg);

    }
    return;
      
    
}
